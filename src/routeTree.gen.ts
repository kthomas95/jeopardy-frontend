/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as PresentationImport } from "./routes/presentation"
import { Route as HighscoresImport } from "./routes/highscores"
import { Route as IndexImport } from "./routes/index"
import { Route as GamesIndexImport } from "./routes/games/index"

// Create/Update Routes

const PresentationRoute = PresentationImport.update({
  id: "/presentation",
  path: "/presentation",
  getParentRoute: () => rootRoute,
} as any)

const HighscoresRoute = HighscoresImport.update({
  id: "/highscores",
  path: "/highscores",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const GamesIndexRoute = GamesIndexImport.update({
  id: "/games/",
  path: "/games/",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/highscores": {
      id: "/highscores"
      path: "/highscores"
      fullPath: "/highscores"
      preLoaderRoute: typeof HighscoresImport
      parentRoute: typeof rootRoute
    }
    "/presentation": {
      id: "/presentation"
      path: "/presentation"
      fullPath: "/presentation"
      preLoaderRoute: typeof PresentationImport
      parentRoute: typeof rootRoute
    }
    "/games/": {
      id: "/games/"
      path: "/games"
      fullPath: "/games"
      preLoaderRoute: typeof GamesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/highscores": typeof HighscoresRoute
  "/presentation": typeof PresentationRoute
  "/games": typeof GamesIndexRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/highscores": typeof HighscoresRoute
  "/presentation": typeof PresentationRoute
  "/games": typeof GamesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/highscores": typeof HighscoresRoute
  "/presentation": typeof PresentationRoute
  "/games/": typeof GamesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/highscores" | "/presentation" | "/games"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/highscores" | "/presentation" | "/games"
  id: "__root__" | "/" | "/highscores" | "/presentation" | "/games/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HighscoresRoute: typeof HighscoresRoute
  PresentationRoute: typeof PresentationRoute
  GamesIndexRoute: typeof GamesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HighscoresRoute: HighscoresRoute,
  PresentationRoute: PresentationRoute,
  GamesIndexRoute: GamesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/highscores",
        "/presentation",
        "/games/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/highscores": {
      "filePath": "highscores.tsx"
    },
    "/presentation": {
      "filePath": "presentation.tsx"
    },
    "/games/": {
      "filePath": "games/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
